//#include<climits>
//nclude<iostream
#include<iostream> 
#include<climits>
template<typename T>
class QueueUsingArray {
  T *data;
  int nextIndex;
  int frontIndex;
  int size;
  int capacity;
  public:
  QueueUsingArray (int s) {
    data = new int[s];
    frontIndex=-1;
    nextIndex=0;
    capacity = s;
    int size=0;
  }
  int getSize() {
    return size;
  }
  bool isEmpty() {
    return size==0;
  }
  void enqueue(T element) {
    data[nextIndex] = element;
    nextIndex = (nextIndex + 1) % capacity;
    if(frontIndex =-1){
    frontIndex=1;
    }
    size++;
  }
  T dequeue() {
    if(isEmpty()) {
      cout <<"Queue is Empty"<<endl;
      return 0;
    }
    T ans = data[frontIndex];
    frontIndex = (frontIndex + 1) % capacity;
    size--;
    if(size==0) {
      frontIndex=-1;
      nextIndex=0;
    }
    return ans;
    
  }
  T front () {
    if(isEmpty()) {
      cout<<"Queue iS Empty"<<endl;
      return 0;
    }
    return data[frontIndex];
    
  }
}; 



//`````````````````````````````````````MAIN FUNCTION----------------
 
 
 #include<iostream>
 using namespace std;
 //#include"QueueUsingArray.h"
 int main() {
   QueueUsingArray<int>q(5);
   
   q.enqueue(10);
   q.enqueue(20);
   q.enqueue(30);
   q.enqueue(40);
   q.enqueue(50);
   q.enqueue(60);
   
   cout<<q.front<<endl;
   cout<<q.dequeue<<endl;
   cout<<q.dequeue<<endl;
   cout<<getsize()<<endl;
   cout<<q.isEmpty()<<endl;
 }
   
 
 --------------DYNAMIC QUEUE------------
 
 void enqueue (T element) {
   if(size== capacity) {
     T *newData = new T(2*capacity);
     int j=0;
     for(int i=frontIndex;i<capacity;i++) {
       newData[j]=data[i];
       j++;
     }
     for(int i=0;i<frontIndex;i++) {
       newData[j]=data[i];
       j++;
     }
     delete data;
     frontIndex =0;
     data = newData;
     nextIndex=capacity;
     capacity*=2;v
   }
   data[nextIndex]=element;
   nextIndex = (nextIndex+1)%capacity;
   size++;
 }
 
 
----------Queue using linked list----------------

  template <typename T>
  class Node {
    int data;
    Node<T> *next;
    Node(T data) {
      this -> data = data;
      next =NULL;
    }
    
};
  
  tepmlate <typename T>
  
  class Queue {
    Node<T> *head;
    Node<T> *tail;
    int size;
    Queue(T element) {
      size=0;
      head=NULL;
      tail = NULL;
    }
    int getSize() {
      return size;
    }
    void enqueue(T element) {
      Node<T> *newNode = new Node<T>(element);
      if(head==NULL) {
        head =newNode;
        tail = newNode;
      }
      else{
      tail -> next = newNode;
      tail = newNode;
      }
      size++;
    }
    T dequeue () {
      if(head==NULL) {
        cout<<"Queue is Empty"<<endl;
        return 0;
      }
      T ans = head->data;
      Node<T> *temp = head;
      delete temp;
      head = head->next;
      size--;
      return ans;
    }
    
    T front() {
      if(head==NULL) {
        cout<<"Queue is Empty"<<endl;
        return 0;
      }
      return head->data;
    }
    
  }
  
 
 =========== INBUILT QUEUE==========
 #include<iostream>
 #include<queue>
 using namespace std;
 int main() {
   queue<int>q;
   q.push(10);
   q.push(20);
   q.push(30);
   q.push(40);
   cout<<q.front()<<endl;
   cout<<q.size<<endl;
   cout<<q.empty()<<endl;
 }
 
 
 
 
